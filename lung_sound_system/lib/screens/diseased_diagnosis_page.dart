import 'dart:io';
import 'package:flutter/material.dart';
import 'package:pdf/pdf.dart';
import 'package:pie_chart/pie_chart.dart';
import 'package:path_provider/path_provider.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:printing/printing.dart';
import 'package:flutter/services.dart' show rootBundle;
import 'dart:typed_data';

class DiseasedDiagnosisPage extends StatefulWidget {
  final Map<String, dynamic> patient;
  final List<String> diseases;
  final List<double> probabilities;

  const DiseasedDiagnosisPage({
    super.key,
    required this.patient,
    required this.diseases,
    required this.probabilities,
  });

  @override
  State<DiseasedDiagnosisPage> createState() => _DiseasedDiagnosisPageState();
}

class _DiseasedDiagnosisPageState extends State<DiseasedDiagnosisPage> {
  bool _showAll = false;
  bool _isGeneratingPdf = false;

  Future<Uint8List> _getImageBytes() async {
    final byteData = await rootBundle.load('assets/splash_image.png');
    return byteData.buffer.asUint8List();
  }

  Future<void> _generateAndSavePdf() async {
    setState(() {
      _isGeneratingPdf = true;
    });

    try {
      final pdf = pw.Document();

      // Add logo
      final imageBytes = await _getImageBytes();
      final logo = pw.MemoryImage(imageBytes);

      // Patient details
      final patientInfo = [
        'Name: ${widget.patient['name']}',
        'NIC: ${widget.patient['nic']}',
        'Gender: ${widget.patient['gender']}',
        'Birth Date: ${widget.patient['birthDate']}',
        'Home Town: ${widget.patient['homeTown']}',
        'Phone: ${widget.patient['phone']}',
      ];

      // Disease data for chart
      final topDiseases = widget.diseases.take(3).toList();
      final topProbs = widget.probabilities.take(3).toList();
      final diseaseData = {
        for (int i = 0; i < topDiseases.length; i++) 
          topDiseases[i]: topProbs[i] * 100,
      };

      // Build PDF
      pdf.addPage(
        pw.Page(
          build: (pw.Context context) {
            return pw.Column(
              crossAxisAlignment: pw.CrossAxisAlignment.start,
              children: [
                pw.Center(
                  child: pw.Image(logo, width: 150, height: 150),
                ),
                pw.SizedBox(height: 20),
                pw.Text(
                  'Patient Diagnosis Report',
                  style: pw.TextStyle(
                    fontSize: 22,
                    fontWeight: pw.FontWeight.bold,
                  ),
                ),
                pw.Divider(),
                pw.Text('*Note: This report is generated by PulmoSense AI and should be reviewed by a medical professional.', 
                  style: pw.TextStyle(fontWeight: pw.FontWeight.bold, color: PdfColors.red)),
                pw.SizedBox(height: 10),
                pw.Text('Patient Information:', 
                  style: pw.TextStyle(fontWeight: pw.FontWeight.bold)),
                pw.SizedBox(height: 10),
                pw.Column(
                  crossAxisAlignment: pw.CrossAxisAlignment.start,
                  children: patientInfo
                      .map((info) => pw.Text(info))
                      .toList(),
                ),
                pw.SizedBox(height: 20),
                pw.Text('Diagnosis Results:', 
                  style: pw.TextStyle(fontWeight: pw.FontWeight.bold)),
                pw.SizedBox(height: 10),
                pw.Text(
                  'Detected Lung Conditions:',
                  style: pw.TextStyle(fontWeight: pw.FontWeight.bold),
                ),
                pw.SizedBox(height: 10),
                ...widget.diseases.asMap().entries.map((entry) {
                  final index = entry.key;
                  final disease = entry.value;
                  final prob = (widget.probabilities[index] * 100).toStringAsFixed(2);
                  return pw.Padding(
                    padding: const pw.EdgeInsets.only(bottom: 5),
                    child: pw.Text('$disease: $prob%'),
                  );
                }).toList(),
                pw.SizedBox(height: 20),
                pw.Text(
                  'Top Conditions Probability Distribution',
                  style: pw.TextStyle(fontWeight: pw.FontWeight.bold),
                ),
                pw.SizedBox(height: 10),
                pw.Center(
                  child: pw.Container(
                    height: 200,
                    child: pw.Chart(
                      title: pw.Text('Disease Probability'),
                      grid: pw.CartesianGrid(
                        xAxis: pw.FixedAxis.fromStrings(
                          diseaseData.keys.toList(),
                        ),
                        yAxis: pw.FixedAxis([0, 25, 50, 75, 100]),
                      ),
                      datasets: [
                        pw.BarDataSet(
                          color:PdfColor.fromInt(0xFFFF0000),
                          width: 40,
                          data: diseaseData.entries
                              .map((entry) => pw.PointChartValue(widget.diseases.indexOf(entry.key).toDouble(), entry.value))
                              .toList(),
                        ),
                      ],
                    ),
                  ),
                ),
                pw.SizedBox(height: 20),
                pw.SizedBox(width: 60),
                pw.Text(
                  'Note: This report is generated by PulmoSense AI and should be reviewed by a medical professional.',
                  style: pw.TextStyle(fontStyle: pw.FontStyle.italic),
                ),
              ],
            );
          },
        ),
      );

      // Save and share PDF
      final output = await getTemporaryDirectory();
      final file = File("${output.path}/diagnosis_report.pdf");
      await file.writeAsBytes(await pdf.save());

      await Printing.sharePdf(
        bytes: await pdf.save(),
        filename: 'diagnosis_report.pdf',
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Failed to generate PDF: $e')),
      );
    } finally {
      setState(() {
        _isGeneratingPdf = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    final topDiseases = widget.diseases.take(3).toList();
    final topProbs = widget.probabilities.take(3).toList();

    final dataMap = {
      for (int i = 0; i < topDiseases.length; i++) topDiseases[i]: topProbs[i] * 100,
    };

    return Scaffold(
      appBar: AppBar(
        title: const Text(
          "Diseased Diagnosis",
          style: TextStyle(
            fontWeight: FontWeight.bold,
            fontSize: 20,
            color: Colors.white,
          ),
        ),
        backgroundColor: const Color(0xFF1C1C1E),
        centerTitle: true,
        iconTheme: const IconThemeData(color: Colors.white),
        actions: [
          IconButton(
            icon: _isGeneratingPdf
                ? const CircularProgressIndicator(
                    valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                    strokeWidth: 2,
                  )
                : const Icon(Icons.picture_as_pdf),
            onPressed: _isGeneratingPdf ? null : _generateAndSavePdf,
            tooltip: 'Generate PDF Report',
          ),
        ],
      ),
      backgroundColor: const Color(0xFF1C1C1E),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Logo at the top
            Center(
              child: Image.asset(
                'assets/splash_image.png',
                width: 150,
                height: 150,
              ),
            ),
            const SizedBox(height: 16),
            const Text(
              "This page provides diagnosis results based on the uploaded lung sound.",
              style: TextStyle(color: Colors.white70, fontSize: 14),
              textAlign: TextAlign.justify,
            ),
            const SizedBox(height: 16),
            PieChart(
              dataMap: dataMap,
              chartType: ChartType.disc,
              chartValuesOptions: const ChartValuesOptions(
                showChartValuesInPercentage: true,
                showChartValueBackground: false,
                showChartValuesOutside: true,
                chartValueStyle: TextStyle(
                  color: Colors.white,
                  fontWeight: FontWeight.bold,
                ),
              ),
              colorList: const [
                Colors.redAccent,
                Colors.orangeAccent,
                Colors.yellowAccent,
              ],
              legendOptions: const LegendOptions(
                legendPosition: LegendPosition.right,
                showLegends: true,
                legendTextStyle: TextStyle(color: Colors.white),
              ),
            ),
            const SizedBox(height: 24),
            _buildDiseaseList(),
            Center(
              child: TextButton(
                onPressed: () {
                  setState(() {
                    _showAll = !_showAll;
                  });
                },
                child: Text(
                  _showAll ? 'Show less' : 'Show more',
                  style: const TextStyle(color: Colors.blueAccent),
                ),
              ),
            ),
            const SizedBox(height: 20),
            const Divider(color: Colors.white30),
            const Text(
              'Note:',
              style: TextStyle(
                fontWeight: FontWeight.bold,
                color: Colors.white70,
              ),
            ),
            const Text(
              'This application is capable of diagnosing only 10 lung diseases:\n'
              'Asthma, Bronchiectasis, Bronchiolitis, Bronchitis, COPD, Lung Fibrosis, '
              'Pleural Effusion, Pneumonia, URTI.\n\n'
              'Please consult a medical professional before taking any medication based on this result.',
              style: TextStyle(color: Colors.white60),
            ),
            const SizedBox(height: 20),
          ],
        ),
      ),
    );
  }

  Widget _buildDiseaseList() {
    final int count = _showAll ? widget.diseases.length : 1;

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: List.generate(count, (index) {
        final disease = widget.diseases[index];
        final prob = (widget.probabilities[index] * 100).toStringAsFixed(2);

        return Container(
          margin: const EdgeInsets.only(bottom: 10),
          padding: const EdgeInsets.all(12),
          decoration: BoxDecoration(
            color: const Color(0xFF2C2C2E),
            borderRadius: BorderRadius.circular(10),
          ),
          child: ListTile(
            leading: const Icon(
              Icons.coronavirus_outlined,
              color: Colors.redAccent,
            ),
            title: Text(
              disease,
              style: const TextStyle(
                color: Colors.white,
                fontWeight: FontWeight.bold,
              ),
            ),
            subtitle: Text(
              'Probability: $prob%',
              style: const TextStyle(color: Colors.white70),
            ),
          ),
        );
      }),
    );
  }
}